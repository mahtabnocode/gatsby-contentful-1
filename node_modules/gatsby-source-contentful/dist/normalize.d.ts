import type { Actions, SourceNodesArgs } from "gatsby";
import type { IContentfulAsset, IContentfulEntry, IContentfulLink, ILocalizedField } from "./types/contentful";
import type { SyncCollection, Asset, ContentType, Space, Locale, LocaleCode, EntryWithAllLocalesAndWithoutLinkResolution } from "./types/contentful-js-sdk";
import type { IProcessedPluginOptions } from "./types/plugin";
import type { FieldsType } from "./types/contentful-js-sdk/query/util";
export declare const makeTypeName: (type: string, typePrefix?: string) => string;
interface IContententfulLocaleFallback {
    [key: string]: LocaleCode;
}
export declare const getLocalizedField: ({ field, locale, localesFallback, }: {
    field: ILocalizedField;
    locale: Locale;
    localesFallback: IContententfulLocaleFallback;
}) => unknown;
export declare const buildFallbackChain: (locales: Array<Locale>) => IContententfulLocaleFallback;
export declare const makeId: ({ spaceId, id, currentLocale, defaultLocale, type, }: {
    spaceId: string;
    id: string;
    currentLocale: string;
    defaultLocale: string;
    type: string;
}) => string;
export declare const createRefId: (node: EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string> | IContentfulEntry | Asset) => string;
export declare const createLinkRefId: (link: IContentfulLink) => string;
export declare const buildEntryList: ({ contentTypeItems, currentSyncData, }: {
    contentTypeItems: Array<ContentType>;
    currentSyncData: SyncCollection;
}) => Array<Array<EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string>>>;
export declare const buildResolvableSet: ({ entryList, existingNodes, assets, }: {
    entryList: Array<Array<EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string>>>;
    existingNodes: Array<IContentfulEntry>;
    assets: Array<Asset>;
}) => Set<string>;
interface IForeignReference {
    name: string;
    id: string;
    spaceId: string;
    type: string;
}
interface IForeignReferenceMap {
    [key: string]: Array<IForeignReference>;
}
interface IForeignReferenceMapState {
    links: Array<string>;
    backLinks: IForeignReferenceMap;
}
export declare const buildForeignReferenceMap: ({ contentTypeItems, entryList, resolvable, defaultLocale, space, useNameForId, previousForeignReferenceMapState, deletedEntries, }: {
    contentTypeItems: Array<ContentType>;
    entryList: Array<Array<EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string>>>;
    resolvable: Set<string>;
    defaultLocale: string;
    space: Space;
    useNameForId: boolean;
    previousForeignReferenceMapState?: IForeignReferenceMapState | undefined;
    deletedEntries: Array<EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string>>;
}) => IForeignReferenceMapState;
interface ICreateNodesForContentTypeArgs extends Actions, SourceNodesArgs {
    contentTypeItem: ContentType;
    entries: Array<EntryWithAllLocalesAndWithoutLinkResolution<FieldsType, string>>;
    resolvable: Set<string>;
    foreignReferenceMap: IForeignReferenceMap;
    defaultLocale: string;
    locales: Array<Locale>;
    space: Space;
    useNameForId: boolean;
    pluginConfig: IProcessedPluginOptions;
}
export declare const createNodesForContentType: ({ contentTypeItem, entries, unstable_createNodeManifest, createNode, createNodeId, getNode, resolvable, foreignReferenceMap, defaultLocale, locales, space, useNameForId, pluginConfig, }: ICreateNodesForContentTypeArgs) => Array<void | Promise<void>>;
export declare const createAssetNodes: ({ assetItem, createNode, createNodeId, defaultLocale, locales, space, }: {
    assetItem: any;
    createNode: any;
    createNodeId: any;
    defaultLocale: any;
    locales: Array<Locale>;
    space: Space;
}) => Array<Promise<IContentfulAsset>>;
export {};
