"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderRichText = renderRichText;
var _richTextReactRenderer = require("@contentful/rich-text-react-renderer");
function renderRichText({
  json,
  links
}, makeOptions = {}) {
  const options = typeof makeOptions === `function` ? makeOptions(generateLinkMaps(links)) : makeOptions;
  return (0, _richTextReactRenderer.documentToReactComponents)(json, options);
}

/**
 * Helper function to simplify Rich Text rendering. Based on:
 * https://www.contentful.com/blog/2021/04/14/rendering-linked-assets-entries-in-contentful/
 */
function generateLinkMaps(links) {
  const assetBlockMap = new Map();
  for (const asset of (links === null || links === void 0 ? void 0 : links.assets.block) || []) {
    assetBlockMap.set(asset.sys.id, asset);
  }
  const assetHyperlinkMap = new Map();
  for (const asset of (links === null || links === void 0 ? void 0 : links.assets.hyperlink) || []) {
    assetHyperlinkMap.set(asset.sys.id, asset);
  }
  const entryBlockMap = new Map();
  for (const entry of (links === null || links === void 0 ? void 0 : links.entries.block) || []) {
    entryBlockMap.set(entry.sys.id, entry);
  }
  const entryInlineMap = new Map();
  for (const entry of (links === null || links === void 0 ? void 0 : links.entries.inline) || []) {
    entryInlineMap.set(entry.sys.id, entry);
  }
  const entryHyperlinkMap = new Map();
  for (const entry of (links === null || links === void 0 ? void 0 : links.entries.hyperlink) || []) {
    entryHyperlinkMap.set(entry.sys.id, entry);
  }
  return {
    assetBlockMap,
    assetHyperlinkMap,
    entryBlockMap,
    entryInlineMap,
    entryHyperlinkMap
  };
}