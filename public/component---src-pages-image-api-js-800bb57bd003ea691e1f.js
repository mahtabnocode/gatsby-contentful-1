"use strict";(self.webpackChunkgatsby_example_using_contentful=self.webpackChunkgatsby_example_using_contentful||[]).push([[551],{7188:function(e,t,n){n.r(t);var a=n(7294),l=n(8032),r=n(4458),i=n(9175);t.default=e=>{const t=e.data.allContentfulAsset.edges;return a.createElement(r.Z,null,a.createElement("div",{style:{margin:"0 auto",marginTop:(0,i.qZ)(1.5),marginBottom:(0,i.qZ)(1.5),maxWidth:650,paddingLeft:(0,i.qZ)(3/4),paddingRight:(0,i.qZ)(3/4)}},a.createElement("h1",null,"Image API examples"),a.createElement("p",null,"Gatsby offers rich integration with"," ",a.createElement("a",{href:"https://www.contentful.com/developers/docs/references/images-api/"},"Contentful's Image API")),a.createElement("p",null,"Images can be display with three different layouts. Learn more about them in the"," ",a.createElement("a",{href:"https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#layout"},"reference of gatsby-plugin-image")),a.createElement("ul",null,a.createElement("li",null,a.createElement("a",{href:"#constrained"},"Constrained")),a.createElement("li",null,a.createElement("a",{href:"#fixed"},"Fixed")),a.createElement("li",null,a.createElement("a",{href:"#full-width"},"Full width"))),a.createElement("p",null,"All placeholder variants are supported as well. See more at the",a.createElement("a",{href:"https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#placeholder"},"reference of gatsby-plugin-image")),a.createElement("ul",null,a.createElement("li",null,a.createElement("a",{href:"#blurred"},"Blurred")),a.createElement("li",null,a.createElement("a",{href:"#traced"},"Traced SVG"))),a.createElement("h2",{id:"traced"},"Constrained"),a.createElement("p",null,"This is the default layout. It displays the image at the size of the source image, or you can set a maximum size by passing in"," ",a.createElement("strong",null,"width")," or",a.createElement("strong",null,"height"),"). If the screen or container size is less than the width of the image, it scales down to fit, maintaining its aspect ratio. It generates smaller versions of the image so that a mobile browser doesnâ€™t need to load the full-size image."),a.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat(3, minmax(0, 1fr))",gap:(0,i.qZ)(1)}},t.map((e=>{let{node:{id:t,title:n,constrained:r}}=e;return a.createElement("div",{key:t},a.createElement(l.G,{image:r,alt:n,style:{border:"1px solid red"}}))}))),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(layout: CONSTRAINED, width: 186)\n      }\n    }\n  }\n}"}})),a.createElement("h2",{id:"fixed"},"Fixed"),a.createElement("p",null,"This is a fixed-size image. It will always display at the same size, and will not shrink to fit its container. This is either the size of the source image, or the size set by the width and height props. Only use this if you are certain that the container will never need to be narrower than the image."),t.map((e=>{let{node:{id:t,title:n,fixed:r}}=e;return a.createElement(l.G,{key:t,alt:n,image:r,style:{marginRight:(0,i.qZ)(.5),marginBottom:(0,i.qZ)(.5),border:"1px solid tomato",display:"inline-block"}})})),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(layout: FIXED, width: 100, height: 100)\n      }\n    }\n  }\n}"}})),a.createElement("h2",{id:"full-width"},"Full width"),a.createElement("p",null,"Use this for images that are always displayed at the full width of the screen, such as banners or hero images. Like the constrained layout, this resizes to fit the container. However it is not restricted to a maximum size, so will grow to fill the container however large it is, maintaining its aspect ratio. It generates several smaller image sizes for different screen breakpoints, so that the browser only needs to load one large enough to fit the screen. You can pass a breakpoints prop if you want to specify the sizes to use, though in most cases you can allow it to use the default.")),a.createElement(l.G,{key:t[1].node.id,alt:t[1].node.title,image:t[1].node.fullWidth,style:{}}),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(layout: FULL_WIDTH)\n      }\n    }\n  }\n}"}})),a.createElement("h2",{id:"dominant"},"Dominant color previews"),a.createElement("p",null,"This calculates the dominant color of the source image and uses it as a solid background color."),a.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat(3, minmax(0, 1fr))",gap:(0,i.qZ)(1)}},t.map((e=>{let{node:{id:t,title:n,dominant:r}}=e;return a.createElement("div",{key:t},a.createElement(l.G,{image:r,alt:n,style:{border:"1px solid red"}}))}))),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(\n          layout: CONSTRAINED\n          placeholder: DOMINANT_COLOR\n          width: 186\n        )\n      }\n    }\n  }\n}"}})),a.createElement("h2",{id:"blurred"},"Blurred previews"),a.createElement("p",null,"This generates a very low-resolution version of the source image and displays it as a blurred background."),a.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat(3, minmax(0, 1fr))",gap:(0,i.qZ)(1)}},t.map((e=>{let{node:{id:t,title:n,blurred:r}}=e;return a.createElement("div",{key:t},a.createElement(l.G,{image:r,alt:n,style:{border:"1px solid red"}}))}))),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(\n          layout: CONSTRAINED\n          placeholder: BLURRED\n          width: 186\n        )\n      }\n    }\n  }\n}"}})),a.createElement("h2",{id:"traced"},"Traced SVG previews"),a.createElement("p",null,"This generates a simplified, flat SVG version of the source image, which it displays as a placeholder. This works well for images with simple shapes or that include transparency."),a.createElement("div",{style:{display:"grid",gridTemplateColumns:"repeat(3, minmax(0, 1fr))",gap:(0,i.qZ)(1)}},t.map((e=>{let{node:{id:t,title:n,traced:r}}=e;return a.createElement("div",{key:t},a.createElement(l.G,{image:r,alt:n,style:{border:"1px solid red"}}))}))),a.createElement("h4",null,"GraphQL query"),a.createElement("pre",{style:{background:"#efeded",padding:(0,i.qZ)(3/4)}},a.createElement("code",{dangerouslySetInnerHTML:{__html:"{\n  allContentfulAsset {\n    edges {\n      node {\n        title\n        gatsbyImageData(\n          layout: CONSTRAINED\n          placeholder: TRACED_SVG\n          width: 186\n        )\n      }\n    }\n  }\n}"}})))}}}]);
//# sourceMappingURL=component---src-pages-image-api-js-800bb57bd003ea691e1f.js.map