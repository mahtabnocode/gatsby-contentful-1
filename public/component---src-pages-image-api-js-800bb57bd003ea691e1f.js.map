{"version":3,"file":"component---src-pages-image-api-js-800bb57bd003ea691e1f.js","mappings":"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","sources":["webpack://gatsby-example-using-contentful/./src/pages/image-api.js"],"sourcesContent":["import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\n\r\nimport Layout from \"../layouts\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst ImageAPI = props => {\r\n  const assets = props.data.allContentfulAsset.edges\r\n  return (\r\n    <Layout>\r\n      <div\r\n        style={{\r\n          margin: `0 auto`,\r\n          marginTop: rhythm(1.5),\r\n          marginBottom: rhythm(1.5),\r\n          maxWidth: 650,\r\n          paddingLeft: rhythm(3 / 4),\r\n          paddingRight: rhythm(3 / 4),\r\n        }}\r\n      >\r\n        <h1>Image API examples</h1>\r\n        <p>\r\n          Gatsby offers rich integration with\r\n          {` `}\r\n          <a href=\"https://www.contentful.com/developers/docs/references/images-api/\">\r\n            {`Contentful's Image API`}\r\n          </a>\r\n        </p>\r\n        <p>\r\n          Images can be display with three different layouts. Learn more about\r\n          them in the{` `}\r\n          <a href=\"https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#layout\">\r\n            reference of gatsby-plugin-image\r\n          </a>\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            <a href=\"#constrained\">Constrained</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#fixed\">Fixed</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#full-width\">Full width</a>\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          All placeholder variants are supported as well. See more at the\r\n          <a href=\"https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-plugin-image/#placeholder\">\r\n            reference of gatsby-plugin-image\r\n          </a>\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            <a href=\"#blurred\">Blurred</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#traced\">Traced SVG</a>\r\n          </li>\r\n        </ul>\r\n        <h2 id=\"traced\">Constrained</h2>\r\n        <p>\r\n          This is the default layout. It displays the image at the size of the\r\n          source image, or you can set a maximum size by passing in{` `}\r\n          <strong>width</strong> or\r\n          <strong>height</strong>). If the screen or container size is less than\r\n          the width of the image, it scales down to fit, maintaining its aspect\r\n          ratio. It generates smaller versions of the image so that a mobile\r\n          browser doesnâ€™t need to load the full-size image.\r\n        </p>\r\n        <div\r\n          style={{\r\n            display: `grid`,\r\n            gridTemplateColumns: `repeat(3, minmax(0, 1fr))`,\r\n            gap: rhythm(1),\r\n          }}\r\n        >\r\n          {assets.map(({ node: { id, title, constrained } }) => (\r\n            <div key={id}>\r\n              <GatsbyImage\r\n                image={constrained}\r\n                alt={title}\r\n                style={{ border: `1px solid red` }}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <h4>GraphQL query</h4>\r\n        <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n          <code\r\n            dangerouslySetInnerHTML={{\r\n              __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(layout: CONSTRAINED, width: 186)\r\n      }\r\n    }\r\n  }\r\n}`,\r\n            }}\r\n          />\r\n        </pre>\r\n\r\n        <h2 id=\"fixed\">Fixed</h2>\r\n        <p>\r\n          This is a fixed-size image. It will always display at the same size,\r\n          and will not shrink to fit its container. This is either the size of\r\n          the source image, or the size set by the width and height props. Only\r\n          use this if you are certain that the container will never need to be\r\n          narrower than the image.\r\n        </p>\r\n        {assets.map(({ node: { id, title, fixed } }) => (\r\n          <GatsbyImage\r\n            key={id}\r\n            alt={title}\r\n            image={fixed}\r\n            style={{\r\n              marginRight: rhythm(1 / 2),\r\n              marginBottom: rhythm(1 / 2),\r\n              border: `1px solid tomato`,\r\n              display: `inline-block`,\r\n            }}\r\n          />\r\n        ))}\r\n        <h4>GraphQL query</h4>\r\n        <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n          <code\r\n            dangerouslySetInnerHTML={{\r\n              __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(layout: FIXED, width: 100, height: 100)\r\n      }\r\n    }\r\n  }\r\n}`,\r\n            }}\r\n          />\r\n        </pre>\r\n\r\n        <h2 id=\"full-width\">Full width</h2>\r\n        <p>\r\n          Use this for images that are always displayed at the full width of the\r\n          screen, such as banners or hero images. Like the constrained layout,\r\n          this resizes to fit the container. However it is not restricted to a\r\n          maximum size, so will grow to fill the container however large it is,\r\n          maintaining its aspect ratio. It generates several smaller image sizes\r\n          for different screen breakpoints, so that the browser only needs to\r\n          load one large enough to fit the screen. You can pass a breakpoints\r\n          prop if you want to specify the sizes to use, though in most cases you\r\n          can allow it to use the default.\r\n        </p>\r\n      </div>\r\n      <GatsbyImage\r\n        key={assets[1].node.id}\r\n        alt={assets[1].node.title}\r\n        image={assets[1].node.fullWidth}\r\n        style={{}}\r\n      />\r\n      <h4>GraphQL query</h4>\r\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n        <code\r\n          dangerouslySetInnerHTML={{\r\n            __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(layout: FULL_WIDTH)\r\n      }\r\n    }\r\n  }\r\n}`,\r\n          }}\r\n        />\r\n      </pre>\r\n      <h2 id=\"dominant\">Dominant color previews</h2>\r\n      <p>\r\n        This calculates the dominant color of the source image and uses it as a\r\n        solid background color.\r\n      </p>\r\n      <div\r\n        style={{\r\n          display: `grid`,\r\n          gridTemplateColumns: `repeat(3, minmax(0, 1fr))`,\r\n          gap: rhythm(1),\r\n        }}\r\n      >\r\n        {assets.map(({ node: { id, title, dominant } }) => (\r\n          <div key={id}>\r\n            <GatsbyImage\r\n              image={dominant}\r\n              alt={title}\r\n              style={{ border: `1px solid red` }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <h4>GraphQL query</h4>\r\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n        <code\r\n          dangerouslySetInnerHTML={{\r\n            __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(\r\n          layout: CONSTRAINED\r\n          placeholder: DOMINANT_COLOR\r\n          width: 186\r\n        )\r\n      }\r\n    }\r\n  }\r\n}`,\r\n          }}\r\n        />\r\n      </pre>\r\n      <h2 id=\"blurred\">Blurred previews</h2>\r\n      <p>\r\n        This generates a very low-resolution version of the source image and\r\n        displays it as a blurred background.\r\n      </p>\r\n      <div\r\n        style={{\r\n          display: `grid`,\r\n          gridTemplateColumns: `repeat(3, minmax(0, 1fr))`,\r\n          gap: rhythm(1),\r\n        }}\r\n      >\r\n        {assets.map(({ node: { id, title, blurred } }) => (\r\n          <div key={id}>\r\n            <GatsbyImage\r\n              image={blurred}\r\n              alt={title}\r\n              style={{ border: `1px solid red` }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <h4>GraphQL query</h4>\r\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n        <code\r\n          dangerouslySetInnerHTML={{\r\n            __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(\r\n          layout: CONSTRAINED\r\n          placeholder: BLURRED\r\n          width: 186\r\n        )\r\n      }\r\n    }\r\n  }\r\n}`,\r\n          }}\r\n        />\r\n      </pre>\r\n      <h2 id=\"traced\">Traced SVG previews</h2>\r\n      <p>\r\n        This generates a simplified, flat SVG version of the source image, which\r\n        it displays as a placeholder. This works well for images with simple\r\n        shapes or that include transparency.\r\n      </p>\r\n      <div\r\n        style={{\r\n          display: `grid`,\r\n          gridTemplateColumns: `repeat(3, minmax(0, 1fr))`,\r\n          gap: rhythm(1),\r\n        }}\r\n      >\r\n        {assets.map(({ node: { id, title, traced } }) => (\r\n          <div key={id}>\r\n            <GatsbyImage\r\n              image={traced}\r\n              alt={title}\r\n              style={{ border: `1px solid red` }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <h4>GraphQL query</h4>\r\n      <pre style={{ background: `#efeded`, padding: rhythm(3 / 4) }}>\r\n        <code\r\n          dangerouslySetInnerHTML={{\r\n            __html: `{\r\n  allContentfulAsset {\r\n    edges {\r\n      node {\r\n        title\r\n        gatsbyImageData(\r\n          layout: CONSTRAINED\r\n          placeholder: TRACED_SVG\r\n          width: 186\r\n        )\r\n      }\r\n    }\r\n  }\r\n}`,\r\n          }}\r\n        />\r\n      </pre>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ImageAPI\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allContentfulAsset(filter: { node_locale: { eq: \"en-US\" } }) {\r\n      edges {\r\n        node {\r\n          title\r\n          id\r\n          constrained: gatsbyImageData(layout: CONSTRAINED, width: 186)\r\n          fixed: gatsbyImageData(layout: FIXED, width: 100, height: 100)\r\n          fullWidth: gatsbyImageData(layout: FULL_WIDTH)\r\n          dominant: gatsbyImageData(\r\n            layout: CONSTRAINED\r\n            placeholder: DOMINANT_COLOR\r\n            width: 186\r\n          )\r\n          blurred: gatsbyImageData(\r\n            layout: CONSTRAINED\r\n            placeholder: BLURRED\r\n            width: 186\r\n          )\r\n          traced: gatsbyImageData(\r\n            layout: CONSTRAINED\r\n            placeholder: TRACED_SVG\r\n            width: 186\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["props","assets","data","allContentfulAsset","edges","React","Layout","style","margin","marginTop","rhythm","marginBottom","maxWidth","paddingLeft","paddingRight","href","id","display","gridTemplateColumns","gap","map","_ref","node","title","constrained","key","GatsbyImage","image","alt","border","background","padding","dangerouslySetInnerHTML","__html","_ref2","fixed","marginRight","fullWidth","_ref3","dominant","_ref4","blurred","_ref5","traced"],"sourceRoot":""}