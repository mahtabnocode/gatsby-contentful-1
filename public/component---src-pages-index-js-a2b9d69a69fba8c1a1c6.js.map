{"version":3,"file":"component---src-pages-index-js-a2b9d69a69fba8c1a1c6.js","mappings":"8NAaA,MAAMA,EAAUC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OACvBE,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,GAAI,CACHC,MAAO,CAAEC,MAAM,UAAYC,eAAe,QAC1CC,GAAIN,EAAKO,YAETN,EAAAA,cAAA,OACEE,MAAO,CACLK,QAAQ,OACRC,WAAW,SACXC,aAAa,sBACbC,eAAeC,EAAAA,EAAAA,IAAO,IACtBC,cAAcD,EAAAA,EAAAA,IAAO,MAGvBX,EAAAA,cAAA,OAAKE,MAAO,CAAEW,aAAaF,EAAAA,EAAAA,IAAO,MAC/BZ,EAAKe,MAAM,GAAGC,iBACbf,EAAAA,cAACgB,EAAAA,EAAW,CACVd,MAAO,CAAEe,OAAQ,GACjBH,MAAOf,EAAKe,MAAM,GAAGC,mBAI3Bf,EAAAA,cAAA,OAAKE,MAAO,CAAEgB,KAAM,IAAMnB,EAAKoB,YAAYA,eAG3C,EACP,IAEKC,EAAS,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAA,KAAAC,YAAA,KAqCZ,OArCYC,EAAAA,EAAAA,GAAAJ,EAAAC,GAAAD,EAAAK,UACbC,OAAA,WACE,MAAMC,EAAiBC,KAAKC,MAAMC,KAAKC,GAAGC,MACpCC,EAAiBL,KAAKC,MAAMC,KAAKI,OAAOF,MAC9C,OACEhC,EAAAA,cAACmC,EAAAA,EAAM,KACLnC,EAAAA,cAAA,OAAKE,MAAO,CAAEU,cAAcD,EAAAA,EAAAA,IAAO,KACjCX,EAAAA,cAAA,qBAAgB,8CAChBA,EAAAA,cAACC,EAAAA,GAAI,CAACI,GAAG,eAAc,gBACvBL,EAAAA,cAAA,WACAA,EAAAA,cAAA,WACAA,EAAAA,cAAA,WACAA,EAAAA,cAAA,UAAI,gBACJA,EAAAA,cAAA,SAAG,OACGA,EAAAA,cAAA,YAAM,4BAA+B,mCACrC,eAAgB,sGAGtBA,EAAAA,cAAA,SAAG,gKAG0BA,EAAAA,cAAA,YAAM,eAAkB,qDAGrDA,EAAAA,cAAA,UAAI,SACH2B,EAAeS,KAAI,CAAAC,EAAWC,KAAC,IAAX,KAAEvC,GAAMsC,EAAA,OAC3BrC,EAAAA,cAACH,EAAO,CAACE,KAAMA,EAAMwC,IAAKxC,EAAKyC,IAAM,IAEvCxC,EAAAA,cAAA,WACAA,EAAAA,cAAA,WACAA,EAAAA,cAAA,UAAI,MACHiC,EAAeG,KAAI,CAAAK,EAAWH,KAAC,IAAX,KAAEvC,GAAM0C,EAAA,OAC3BzC,EAAAA,cAACH,EAAO,CAACE,KAAMA,EAAMwC,IAAKxC,EAAKyC,IAAM,KAK/C,EAACpB,CAAA,CArCY,CAASpB,EAAAA,WA0CxB,W","sources":["webpack://gatsby-example-using-contentful/./src/pages/index.js"],"sourcesContent":["import React from \"react\"\r\nimport * as PropTypes from \"prop-types\"\r\n\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\n\r\nimport { rhythm } from \"../utils/typography\"\r\nimport Layout from \"../layouts\"\r\n\r\nconst propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n}\r\n\r\nconst Product = ({ node }) => (\r\n  <div>\r\n    <Link\r\n      style={{ color: `inherit`, textDecoration: `none` }}\r\n      to={node.gatsbyPath}\r\n    >\r\n      <div\r\n        style={{\r\n          display: `flex`,\r\n          alignItems: `center`,\r\n          borderBottom: `1px solid lightgray`,\r\n          paddingBottom: rhythm(1 / 2),\r\n          marginBottom: rhythm(1 / 2),\r\n        }}\r\n      >\r\n        <div style={{ marginRight: rhythm(1 / 2) }}>\r\n          {node.image[0].gatsbyImageData && (\r\n            <GatsbyImage\r\n              style={{ margin: 0 }}\r\n              image={node.image[0].gatsbyImageData}\r\n            />\r\n          )}\r\n        </div>\r\n        <div style={{ flex: 1 }}>{node.productName.productName}</div>\r\n      </div>\r\n    </Link>\r\n  </div>\r\n)\r\n\r\nclass IndexPage extends React.Component {\r\n  render() {\r\n    const usProductEdges = this.props.data.us.edges\r\n    const deProductEdges = this.props.data.german.edges\r\n    return (\r\n      <Layout>\r\n        <div style={{ marginBottom: rhythm(2) }}>\r\n          <h2>{`Gatsby's`} integration with the Contentful Image API</h2>\r\n          <Link to=\"/image-api/\">See examples</Link>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <h2>Localization</h2>\r\n          <p>\r\n            The <code>gatsby-source-contentful</code> plugin offers full support\r\n            for {`Contentful's`} localization features. Our sample space\r\n            includes products localized into both English and German.\r\n          </p>\r\n          <p>\r\n            An entry and asset node are created for each locale following\r\n            fallback rules for missing localization. In addition, each node has\r\n            an additional field added, <code>node_locale</code> so you can\r\n            select for nodes from a single locale\r\n          </p>\r\n          <h3>en-US</h3>\r\n          {usProductEdges.map(({ node }, i) => (\r\n            <Product node={node} key={node.id} />\r\n          ))}\r\n          <br />\r\n          <br />\r\n          <h3>de</h3>\r\n          {deProductEdges.map(({ node }, i) => (\r\n            <Product node={node} key={node.id} />\r\n          ))}\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nIndexPage.propTypes = propTypes\r\n\r\nexport default IndexPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    us: allContentfulProduct(filter: { node_locale: { eq: \"en-US\" } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          gatsbyPath(filePath: \"/products/{ContentfulProduct.id}\")\r\n          productName {\r\n            productName\r\n          }\r\n          image {\r\n            gatsbyImageData(layout: FIXED, width: 75)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    german: allContentfulProduct(filter: { node_locale: { eq: \"de\" } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          gatsbyPath(filePath: \"/products/{ContentfulProduct.id}\")\r\n          productName {\r\n            productName\r\n          }\r\n          image {\r\n            gatsbyImageData(layout: FIXED, width: 75)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["Product","_ref","node","React","Link","style","color","textDecoration","to","gatsbyPath","display","alignItems","borderBottom","paddingBottom","rhythm","marginBottom","marginRight","image","gatsbyImageData","GatsbyImage","margin","flex","productName","IndexPage","_React$Component","apply","arguments","_inheritsLoose","prototype","render","usProductEdges","this","props","data","us","edges","deProductEdges","german","Layout","map","_ref2","i","key","id","_ref3"],"sourceRoot":""}