### Type definitions saved at 2023-05-11T09:52:37.595Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """Crop a part of the original image to match the specified size."""
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller
  than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """Scale the image regardless of the original aspect ratio."""
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile @derivedTypes @dontInfer {
  contentful_id: String!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1,
    2] for fluid. In this case, an image with a fluid layout and width = 400
    would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int
    quality: Int = 50
  ): GatsbyImageData!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String
  filename: String
  width: Int
  height: Int
  size: Int
}

type ContentfulCategory implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  icon: ContentfulAsset @link(by: "id", from: "icon___NODE")
  product: [ContentfulProduct] @link(by: "id", from: "product___NODE")
  title: contentfulCategoryTitleTextNode @link(by: "id", from: "title___NODE")
  categoryDescription: contentfulCategoryCategoryDescriptionTextNode @link(by: "id", from: "categoryDescription___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulCategorySys
}

type ContentfulBrand implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  website: String
  logo: ContentfulAsset @link(by: "id", from: "logo___NODE")
  product: [ContentfulProduct] @link(by: "id", from: "product___NODE")
  companyName: contentfulBrandCompanyNameTextNode @link(by: "id", from: "companyName___NODE")
  companyDescription: contentfulBrandCompanyDescriptionTextNode @link(by: "id", from: "companyDescription___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulBrandSys
  email: String
  phone: [String]
  twitter: String
}

type ContentfulProduct implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  slug: String
  sizetypecolor: String
  tags: [String]
  price: Int
  quantity: Int
  sku: String
  website: String
  image: [ContentfulAsset] @link(by: "id", from: "image___NODE")
  categories: [ContentfulCategory] @link(by: "id", from: "categories___NODE")
  brand: ContentfulBrand @link(by: "id", from: "brand___NODE")
  singleImage: ContentfulAsset @link(by: "id", from: "singleImage___NODE")
  productName: contentfulProductProductNameTextNode @link(by: "id", from: "productName___NODE")
  productDescription: contentfulProductProductDescriptionTextNode @link(by: "id", from: "productDescription___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProductSys
}

type ContentfulJsonTest implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  jsonTest: contentfulJsonTestJsonTestJsonNode @link(by: "id", from: "jsonTest___NODE")
  jsonStringTest: [contentfulJsonTestJsonStringTestJsonNode] @link(by: "id", from: "jsonStringTest___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulJsonTestSys
}

type ContentfulRemarkTest implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  content: contentfulRemarkTestContentTextNode @link(by: "id", from: "content___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulRemarkTestSys
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["contentfulRemarkTestContentTextNode", "contentfulProductProductNameTextNode", "contentfulProductProductDescriptionTextNode", "contentfulCategoryTitleTextNode", "contentfulCategoryCategoryDescriptionTextNode", "contentfulBrandCompanyNameTextNode", "contentfulBrandCompanyDescriptionTextNode"]) @derivedTypes @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type contentfulRemarkTestContentTextNode implements Node @derivedTypes @childOf(types: ["ContentfulRemarkTest"]) @dontInfer {
  content: String
  sys: contentfulRemarkTestContentTextNodeSys
}

type contentfulProductProductNameTextNode implements Node @derivedTypes @childOf(types: ["ContentfulProduct"]) @dontInfer {
  productName: String
  sys: contentfulProductProductNameTextNodeSys
}

type contentfulProductProductDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulProduct"]) @dontInfer {
  productDescription: String
  sys: contentfulProductProductDescriptionTextNodeSys
}

type contentfulJsonTestJsonTestJsonNode implements Node @derivedTypes @childOf(types: ["ContentfulJsonTest"]) @dontInfer {
  engines: contentfulJsonTestJsonTestJsonNodeEngines
  private: Boolean
  scripts: contentfulJsonTestJsonTestJsonNodeScripts
  workspaces: [String]
  eslintIgnore: [String]
  devDependencies: contentfulJsonTestJsonTestJsonNodeDevDependencies
  sys: contentfulJsonTestJsonTestJsonNodeSys
}

type contentfulJsonTestJsonStringTestJsonNode implements Node @derivedTypes @childOf(types: ["ContentfulJsonTest"]) @dontInfer {
  content: String
  sys: contentfulJsonTestJsonStringTestJsonNodeSys
}

type contentfulCategoryTitleTextNode implements Node @derivedTypes @childOf(types: ["ContentfulCategory"]) @dontInfer {
  title: String
  sys: contentfulCategoryTitleTextNodeSys
}

type contentfulCategoryCategoryDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulCategory"]) @dontInfer {
  categoryDescription: String
  sys: contentfulCategoryCategoryDescriptionTextNodeSys
}

type contentfulBrandCompanyNameTextNode implements Node @derivedTypes @childOf(types: ["ContentfulBrand"]) @dontInfer {
  companyName: String
  sys: contentfulBrandCompanyNameTextNodeSys
}

type contentfulBrandCompanyDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulBrand"]) @dontInfer {
  companyDescription: String
  sys: contentfulBrandCompanyDescriptionTextNodeSys
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type contentfulRemarkTestContentTextNodeSys {
  type: String
}

type contentfulProductProductNameTextNodeSys {
  type: String
}

type contentfulProductProductDescriptionTextNodeSys {
  type: String
}

type contentfulJsonTestJsonTestJsonNodeEngines {
  yarn: String
}

type contentfulJsonTestJsonTestJsonNodeScripts {
  jest: String
  lint: String
  plop: String
  test: String
  lerna: String
  watch: String
  format: String
  publish: String
  bootstrap: String
  lint_flow: String @proxy(from: "lint:flow")
  remotedev: String
  test_bkup: String
  format_www: String @proxy(from: "format-www")
  test_watch: String @proxy(from: "test:watch")
  test_update: String @proxy(from: "test:update")
  publish_next: String @proxy(from: "publish-next")
  check_versions: String @proxy(from: "check-versions")
  format_scripts: String @proxy(from: "format-scripts")
  publish_canary: String @proxy(from: "publish-canary")
  format_examples: String @proxy(from: "format-examples")
  format_packages: String @proxy(from: "format-packages")
  format_cache_dir: String @proxy(from: "format-cache-dir")
}

type contentfulJsonTestJsonTestJsonNodeDevDependencies {
  glob: String
  jest: String
  plop: String
  lerna: String
  eslint: String
  rimraf: String
  chokidar: String
  flow_bin: String @proxy(from: "flow-bin")
  jest_cli: String @proxy(from: "jest-cli")
  prettier: String
  babel_cli: String @proxy(from: "babel-cli")
  cross_env: String @proxy(from: "cross-env")
  babel_jest: String @proxy(from: "babel-jest")
  babel_eslint: String @proxy(from: "babel-eslint")
  babel_runtime: String @proxy(from: "babel-runtime")
  babel_register: String @proxy(from: "babel-register")
  babel_preset_env: String @proxy(from: "babel-preset-env")
  remotedev_server: String @proxy(from: "remotedev-server")
  babel_preset_flow: String @proxy(from: "babel-preset-flow")
  babel_preset_react: String @proxy(from: "babel-preset-react")
  babel_plugin_lodash: String @proxy(from: "babel-plugin-lodash")
  eslint_plugin_react: String @proxy(from: "eslint-plugin-react")
  prettier_eslint_cli: String @proxy(from: "prettier-eslint-cli")
  babel_preset_stage_0: String @proxy(from: "babel-preset-stage-0")
  eslint_config_google: String @proxy(from: "eslint-config-google")
  eslint_plugin_import: String @proxy(from: "eslint-plugin-import")
  eslint_config_prettier: String @proxy(from: "eslint-config-prettier")
  eslint_plugin_flowtype: String @proxy(from: "eslint-plugin-flowtype")
  eslint_plugin_jsx_a11y: String @proxy(from: "eslint-plugin-jsx-a11y")
  eslint_plugin_prettier: String @proxy(from: "eslint-plugin-prettier")
  eslint_plugin_flow_vars: String @proxy(from: "eslint-plugin-flow-vars")
  babel_plugin_transform_runtime: String @proxy(from: "babel-plugin-transform-runtime")
  babel_plugin_add_module_exports: String @proxy(from: "babel-plugin-add-module-exports")
  babel_plugin_transform_flow_strip_types: String @proxy(from: "babel-plugin-transform-flow-strip-types")
  babel_plugin_transform_async_to_generator: String @proxy(from: "babel-plugin-transform-async-to-generator")
}

type contentfulJsonTestJsonTestJsonNodeSys {
  type: String
}

type contentfulJsonTestJsonStringTestJsonNodeSys {
  type: String
}

type contentfulCategoryTitleTextNodeSys {
  type: String
}

type contentfulCategoryCategoryDescriptionTextNodeSys {
  type: String
}

type contentfulBrandCompanyNameTextNodeSys {
  type: String
}

type contentfulBrandCompanyDescriptionTextNodeSys {
  type: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

type ContentfulRemarkTestSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulRemarkTestSysContentType
}

type ContentfulRemarkTestSysContentType @derivedTypes {
  sys: ContentfulRemarkTestSysContentTypeSys
}

type ContentfulRemarkTestSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulProductSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProductSysContentType
}

type ContentfulProductSysContentType @derivedTypes {
  sys: ContentfulProductSysContentTypeSys
}

type ContentfulProductSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulJsonTestSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulJsonTestSysContentType
}

type ContentfulJsonTestSysContentType @derivedTypes {
  sys: ContentfulJsonTestSysContentTypeSys
}

type ContentfulJsonTestSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulContentTypeSys {
  type: String
}

type ContentfulCategorySys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulCategorySysContentType
}

type ContentfulCategorySysContentType @derivedTypes {
  sys: ContentfulCategorySysContentTypeSys
}

type ContentfulCategorySysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulBrandSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulBrandSysContentType
}

type ContentfulBrandSysContentType @derivedTypes {
  sys: ContentfulBrandSysContentTypeSys
}

type ContentfulBrandSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}